#!/usr/bin/env python

from pwn import *
import sys
import argparse
import json
from ropper import RopperService
from one_gadget import generate_one_gadget

binary = ''
bin_name = ''
binary_arch = ''
lib = ''
lib_name = ''
ip = ''
port = ''
new_file = ''

# =============================
# USEFUL FUNCTIONS
# =============================

def open_binary():
    global bin_name
    global binary
    global lib_name
    global lib
    global binary_arch
    log.info('Opening Binary')

    if '-b' in sys.argv:
        bin_name = sys.argv[sys.argv.index('-b')+1]
        binary = ELF(bin_name)
        log.info('Binary name= '+bin_name)
        binary_arch = binary.get_machine_arch()

    elif '--binary' in sys.argv:
        bin_name = sys.argv[sys.argv.index('--binary')+1]
        binary = ELF(bin_name)
        log.info('Binary name= '+bin_name)
        binary_arch = binary.get_machine_arch()

    else:
        log.info('No Binary specified')

    # In case lib is provided
    if '-l' in sys.argv:
        lib_name = sys.argv[sys.argv.index('-l')+1]
        lib = ELF(lib_name)
        log.info('Lib name= '+lib_name)

    elif '--lib' in sys.argv:
        lib_name = sys.argv[sys.argv.index('--lib')+1]
        lib = ELF(lib_name)
        log.info('Lib name= '+lib_name)

    else:
        if binary_arch == 'amd64':
            lib_name = '/lib/x86_64-linux-gnu/libc.so.6'
        elif binary_arch == 'i386':
            lib_name = '/lib/i386-linux-gnu/libc.so.6'
        else:
            log.info('Unknown Arch, no lib loaded.')
            return
        
        lib = ELF(lib_name)
        log.info('No Library specified, using system default:',lib_name)

def export_data():
    print binary.checksec()
    print binary.plt
    print binary.got


def get_plt():
    PLT = str(binary.plt).replace('{', '').replace('}', '').replace("u'", '').replace("':", '=').split(',')
    #log.info(PLT)
    return PLT

def get_got():
    GOT = str(binary.got).replace('{', '').replace('}', '').replace("u'", '').replace("':", '=').split(',')
    #log.info(GOT)
    return GOT

def get_gadgets():
    options = {'color' : False, 
            'badbytes': '00',  
            'all' : False,      
            'inst_count' : 6,  
            'type' : 'all',    
            'detailed' : False}

    rs = RopperService(options)
    arch = ''
    if binary_arch == 'amd64':
        arch = 'x86_64'
    elif binary_arch == 'i386':
        arch = 'x86'
    else:
        log.info('Unknown arch=')
        log.info(binary_arch)
        exit()
    rs.addFile(bin_name, bytes=open(bin_name,'rb').read(), raw=True, arch=arch)
    rs.options.badbytes = ''
    rs.options.all = True
    rs.loadGadgetsFor()
    rs.options.type = 'rop'
    rs.loadGadgetsFor()
    gags = []
    if binary_arch == 'amd64':
        for i in rs.search(search='pop r?i', name=bin_name):
            gags.append(i)
        for i in rs.search(search='pop r?x', name=bin_name):
            gags.append(i)
        for i in rs.search(search='pop r?p', name=bin_name):
            gags.append(i)
        for i in rs.search(search='leave', name=bin_name):
            gags.append(i)
    elif binary_arch == 'i386':
        for i in rs.search(search='pop e?x', name=bin_name):
            gags.append(i)
        for i in rs.search(search='pop e?p', name=bin_name):
            gags.append(i)
        for i in rs.search(search='leave', name=bin_name):
            gags.append(i)
    return gags

def add_server():
    global ip
    global port
    global new_file

    if '-ip' in sys.argv:
        ip = sys.argv[sys.argv.index('-ip')+1]
        port = sys.argv[sys.argv.index('-p')+1]

        new_file = new_file.replace("remote_server = 'ip of the server'","remote_server = '"+ip+"'")
        new_file = new_file.replace("PORT = 'number'","PORT = "+port)

# =============================
# PARSE ARGUMENTS
# =============================
parser = argparse.ArgumentParser(description='Exploit the bins.')
parser.add_argument('--binary', '-b', action=open_binary() )
parser.add_argument('--lib', '-l')
parser.add_argument('-ip')
parser.add_argument('-p')
args = parser.parse_args()

f = open('/root/tools/make_exploit/solve_binaries.py','rb')
data = f.read()
f.close()
new_file = data[:data.index("    ''')")]

# =============================
# REPLACE FILE NAME AND ARCH AND IP + PORT
# =============================
new_file = new_file.replace("context.arch = 'amd64'", "context.arch = '"+binary.get_machine_arch()+"'")
new_file = new_file.replace("program_name = './program_name'","program_name = './"+bin_name+"'")
add_server()
new_file += "    ''')\n\n"

# =============================
# WRITE PLT SECTION
# =============================
PLT = get_plt()
new_file += '# ============ PLT =========== #\n\n'
for i in PLT:
    new_file += i[1 : i[1:].index('=')+1]
    new_file += '_PLT = '
    new_file += hex(int(i[i[1:].index('=')+2:],10))
    new_file += '\n'

# =============================
# WRITE GOT SECTION
# =============================
GOT = get_got()
new_file += '\n# ============ GOT =========== #\n\n'
for i in GOT:
    new_file += i[1 : i[1:].index('=')+1]
    new_file += '_GOT = '
    new_file += hex(int(i[i[1:].index('=')+2:],10))
    new_file += '\n'

# =============================
# WRITE GADGETS
# =============================
GDS = get_gadgets()
magic = ""
for i in range(len(GDS)):
    magic += str(GDS[i][1]) + '\n'
gadgets = []
for i in magic.split('\n'):
    if i == '':
        continue
    j = i.split(': ')
    if 'pop rdi' in j[1]:
        gadgets.append('pop_rdi = '+j[0]+' # '+j[1])
    if 'pop rsi' in j[1]:
        gadgets.append('pop_rsi = '+j[0]+' # '+j[1])
    if 'pop rdx' in j[1]:
        gadgets.append('pop_rdx = '+j[0]+' # '+j[1])
    if 'pop rbp' in j[1]:
        gadgets.append('pop_rbp = '+j[0]+' # '+j[1])
    if 'pop ebp' in j[1]:
        gadgets.append('pop_rbp = '+j[0]+' # '+j[1])
    if 'pop eax' in j[1]:
        gadgets.append('pop_rbp = '+j[0]+' # '+j[1])
    if 'leave' in j[1]:
        gadgets.append('leave = '+j[0]+' # '+j[1])

log.info('Found Gadgets=')
magic = ""
for i in gadgets:
    magic += i + '\n'
    print '> ',i

new_file += "\n# ============================================================== #\n"
new_file += "# ====================== GADGETS & MAGIC ======================= #\n "
new_file += "# ============================================================== #\n"
new_file += '\n' + magic

# =============================
# WRITE MAGIC
# =============================

if lib_name != '':
    magic = 'one_gag = [ '
    sys_off = lib.symbols['system']
    mal_hook_off = lib.symbols['__malloc_hook']
    free_hook_off = lib.symbols['__free_hook']
    for offset in generate_one_gadget(lib_name):
        magic += hex(int(str(offset).replace('L',''))) + ', '
    magic += '0 ] \n'
    log.info(magic)
    magic += 'sys_off = ' + hex(sys_off) + '\n'
    magic += 'mal_hook_off = ' + hex(mal_hook_off) + '\n'
    magic += 'free_hook_off = ' + hex(free_hook_off) + '\n'
    new_file += magic

# =============================
# WRITE REST OF FILE
# =============================
new_file += data[data.index("    ''')")+len("    ''')")+1:]

# =============================
# WRITE TO FILE
# =============================
f = open('solve_binaries.py','wb')
f.write(new_file)
f.close()
